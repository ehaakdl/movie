plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.11'
	id 'io.spring.dependency-management' version '1.1.4'
	id 'com.google.cloud.tools.jib' version '3.4.1'
}

group = 'com.movie'
version = '0.0.1'

java {
	sourceCompatibility = '17'
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	// querydsl
    implementation "com.querydsl:querydsl-jpa:5.0.0:jakarta"
    implementation "com.querydsl:querydsl-apt:5.0.0:jakarta"
    implementation "com.querydsl:querydsl-core:5.0.0"

    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
    annotationProcessor("jakarta.persistence:jakarta.persistence-api")
    annotationProcessor("jakarta.annotation:jakarta.annotation-api")

    // lombok
    implementation 'org.projectlombok:lombok'
    compileOnly 'org.projectlombok:lombok'
    testCompileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'
	
	//	swagger
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.1.0'
	
	// utils
	implementation 'com.mysql:mysql-connector-j:8.4.0'
	implementation 'io.jsonwebtoken:jjwt-api:0.10.7'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

tasks.named('bootBuildImage') {
	builder = 'paketobuildpacks/builder-jammy-base:latest'
}

tasks.named('test') {
	useJUnitPlatform()
}

//dockerize
jib{
	from {
		image='openjdk:17-ea-slim-buster'
	}
	to {
		image='movie-backend'
		tags=[version]
	}
	
	def envProp = new Properties()
	file(".docker/.env").withInputStream { envProp .load(it) }
	
	def envMap = envProp.entrySet().collectEntries { entry ->
    [(entry.key): entry.value]
	}
	def cmdEnvArgs = envProp.collect { key, value ->
    	"-D${key}=${value}"
	}.join(' ')
	
	container {
		creationTime='USE_CURRENT_TIMESTAMP'
		environment=envMap
		jvmFlags = ['-Duser.timezone=GMT']
		ports = ["8080"]
		entrypoint=['java', cmdEnvArgs, '-jar', 'backend' + '-' + version + '.jar']
	}

	extraDirectories {
        paths { 
            path {
                from = file('build/libs') 
            }
        }
    }
}