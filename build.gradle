import org.yaml.snakeyaml.Yaml

plugins {
	// 테스트 커버리지 report plugin
	id 'jacoco'
	// com.google.cloud.tools.jib 플러긴 사용시 gradle 7.4 버전에서 에러 발생함(원인 불명)
	// 그래서 gradle 7.6.4 업데이트하여 해결
	id 'com.google.cloud.tools.jib' version '3.4.1'
}


def yaml = new Yaml()
def applicationYaml = yaml.load(new FileReader(project.rootProject.file('gora-backend/src/main/resources/application.yml')))

group = 'com.mose'
version = applicationYaml['app']['version']
def tomcatPort
if(applicationYaml['server'] != null) {
	if(applicationYaml['server']['port']){
		tomcatPort = applicationYaml['server']['port']
	}else{
		tomcatPort = '8080'
	}
	
} else {
	tomcatPort = '8080'
}


dependencies {

	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.springframework.boot:spring-boot-starter-mail'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-websocket'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	implementation 'org.springframework.boot:spring-boot-starter-mail'

//	swagger
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.1.0'

// utils
	implementation 'org.yaml:snakeyaml:2.2'
	implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.9.0'
	implementation 'org.apache.commons:commons-lang3:3.13.0'
	implementation 'org.modelmapper:modelmapper:3.1.1'
	implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'
	implementation 'org.apache.commons:commons-lang3:3.12.0'
	implementation 'io.jsonwebtoken:jjwt-api:0.10.7'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.10.7'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.10.7'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.mysql:mysql-connector-j'

//	test
	testImplementation 'org.testcontainers:testcontainers:1.18.0'
	testImplementation 'org.testcontainers:mysql:1.18.0'
	testImplementation 'org.testcontainers:junit-jupiter:1.18.0'
	testImplementation 'org.springframework.batch:spring-batch-test'
	testImplementation 'org.springframework.security:spring-security-test'
}

jib{
	from {
		image='openjdk:17-ea-slim-buster'
	}
	to {
		image=projectName
		tags=[version]
	}

	def envProp = new Properties()
	file(".docker/.env").withInputStream { envProp .load(it) }
	
	def envMap = envProp.entrySet().collectEntries { entry ->
    [(entry.key): entry.value]
	}
	def cmdEnvArgs = envProp.collect { key, value ->
    	"-D${key}=${value}"
	}.join(' ')
	
	container {
		creationTime='USE_CURRENT_TIMESTAMP'
		environment=envMap
		jvmFlags = ['-Duser.timezone=GMT']
		ports = [tomcatPort]
		entrypoint=['java', cmdEnvArgs, '-jar', projectName + '-' + version + '.jar']
	}

	extraDirectories {
        paths { 
            path {
                from = file('build/libs') 
            }
        }
    }
}


//test report
jacoco {
	toolVersion = "0.8.10"
	// reportsDir = file("$buildDir/jacoco/")
}

jacocoTestReport {
	reports {
		xml.required = false
		csv.required = false
		html.required = true
	}
}

jacocoTestCoverageVerification{
	String minimumEnv = System.getenv("COVEREGE_LIMIT_PER");
	BigDecimal minimum;
	if(minimumEnv == null){
		minimum = 0.70
	}else{
		minimum = Double.parseDouble(minimumEnv);
	}
	violationRules {
		rule {
			enabled = true
			element = 'CLASS'
			includes = []
			excludes = []
			limit {
				counter = 'INSTRUCTION'
				value = 'COVEREDRATIO'
				minimum = minimum
			}
		}
	}
}

test {
	useJUnitPlatform()
	finalizedBy jacocoTestReport
}